(dp1
S'output'
p2
S''
sS'layer'
p3
S'/var/www/web2py/applications/favoritesmanager/models/db.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'google:datastore\')              # connect to Google BigTable\n                                              # optional DAL(\'gae://namespace\')\n    session.connect(request, response, db = db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\nelse:                                         # else use a normal relational database\n    db = DAL(\'sqlite://storage.sqlite\')       # if not, use SQLite or other DB\n\n# by default give a view/generic.extension to all actions from localhost\n# none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Mail, Auth, Crud, Service, PluginManager, prettydate\nmail = Mail()                                  # mailer\nauth = Auth(db)                                # authentication/authorization\ncrud = Crud(db)                                # for CRUD helpers using auth\nservice = Service()                            # for json, xml, jsonrpc, xmlrpc, amfrpc\nplugins = PluginManager()                      # for configuring plugins\n\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'  # your SMTP server\nmail.settings.sender = \'you@gmail.com\'         # your email\nmail.settings.login = \'username:password\'      # your credentials or None\n\nauth.settings.hmac_key = \'sha512:717ac61d-d1dc-470b-b2ee-8da8e1059ef2\'   # before define_tables()\n\n########################################\ndb.define_table(\'auth_user\',\n    Field(\'id\',\'id\',\n          represent=lambda id:SPAN(id,\' \',A(\'view\',_href=URL(\'auth_user_read\',args=id)))),\n    Field(\'username\', type=\'string\',\n          label=T(\'Username\')),\n    Field(\'first_name\', type=\'string\',\n          label=T(\'First Name\')),\n    Field(\'last_name\', type=\'string\',\n          label=T(\'Last Name\')),\n    Field(\'email\', type=\'string\',\n          label=T(\'Email\')),\n    Field(\'password\', type=\'password\',\n          readable=False,\n          label=T(\'Password\')),\n    Field(\'created_on\',\'datetime\',default=request.now,\n          label=T(\'Created On\'),writable=False,readable=False),\n    Field(\'modified_on\',\'datetime\',default=request.now,\n          label=T(\'Modified On\'),writable=False,readable=False,\n          update=request.now),\n    Field(\'registration_key\',default=\'\',\n          writable=False,readable=False),\n    Field(\'reset_password_key\',default=\'\',\n          writable=False,readable=False),\n    Field(\'registration_id\',default=\'\',\n          writable=False,readable=False),\n    format=\'%(username)s\',\n    migrate=settings.migrate)\n\n\ndb.auth_user.first_name.requires = IS_NOT_EMPTY(error_message=auth.messages.is_empty)\ndb.auth_user.last_name.requires = IS_NOT_EMPTY(error_message=auth.messages.is_empty)\ndb.auth_user.password.requires = CRYPT(key=auth.settings.hmac_key)\ndb.auth_user.username.requires = IS_NOT_IN_DB(db, db.auth_user.username)\ndb.auth_user.registration_id.requires = IS_NOT_IN_DB(db, db.auth_user.registration_id)\ndb.auth_user.email.requires = (IS_EMAIL(error_message=auth.messages.invalid_email),\n                               IS_NOT_IN_DB(db, db.auth_user.email))\nauth.define_tables(migrate = settings.migrate)                           # creates all needed tables\nauth.settings.mailer = mail                    # for user email verification\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.messages.verify_email = \'Click on the link http://\'+request.env.http_host+URL(\'default\',\'user\',args=[\'verify_email\'])+\'/%(key)s to verify your email\'\nauth.settings.reset_password_requires_verification = True\nauth.messages.reset_password = \'Click on the link http://\'+request.env.http_host+URL(\'default\',\'user\',args=[\'reset_password\'])+\'/%(key)s to reset your password\'\n\n#########################################################################\n## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, uncomment and customize following\n# from gluon.contrib.login_methods.rpx_account import RPXAccount\n# auth.settings.actions_disabled = \\\n#    [\'register\',\'change_password\',\'request_reset_password\']\n# auth.settings.login_form = RPXAccount(request, api_key=\'...\',domain=\'...\',\n#    url = "http://localhost:8000/%s/default/user/login" % request.application)\n## other login methods are in gluon/contrib/login_methods\n#########################################################################\n\ncrud.settings.auth = None        # =auth to enforce authorization on crud\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\nmail.settings.server = settings.email_server\nmail.settings.sender = settings.email_sender\nmail.settings.login = settings.email_login\n\n#Modifications\n\'\'\'\n  define a type of status:\n  -private <- paticular, somente o dono da conta podera visualizar\n  -public <- podera compartilhar somente com o app\n  -share <- podera compartilhar com redes sociais\n\'\'\'\ndb.define_table(\'bookmarks\',\n  Field(\'user\',type=\'string\', requires=IS_NOT_EMPTY()),\n  Field(\'name\',type=\'string\',label=T(\'Name of Bookmark\'), requires=[IS_NOT_EMPTY(), IS_NOT_IN_DB(db.bookmarks)]),\n  Field(\'url\',type=\'string\', label=T(\'Url of Bookmark\'), default=\'http://\', requires=[IS_NOT_EMPTY(), IS_URL()]),\n  Field(\'status\',type=\'string\', requires=IS_NOT_EMPTY(), default=\'public\'),\n  Field(\'creation\', type=\'string\', requires=IS_NOT_EMPTY())\n)'
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "/var/www/web2py/gluon/restricted.py", line 192, in restricted\n    exec ccode in environment\n  File "/var/www/web2py/applications/favoritesmanager/models/db.py", line 134, in <module>\n    Field(\'name\',type=\'string\',label=T(\'Name of Bookmark\'), requires=[IS_NOT_EMPTY(), IS_NOT_IN_DB(db.bookmarks)]),\n  File "/var/www/web2py/gluon/dal.py", line 4331, in __getattr__\n    return self[key]\n  File "/var/www/web2py/gluon/dal.py", line 4325, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'bookmarks\'\n'
p10
s.